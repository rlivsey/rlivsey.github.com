<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Livsey.org]]></title>
  <link href="http://livsey.org/atom.xml" rel="self"/>
  <link href="http://livsey.org/"/>
  <updated>2013-12-13T22:26:06+00:00</updated>
  <id>http://livsey.org/</id>
  <author>
    <name><![CDATA[Richard Livsey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing Fireplace]]></title>
    <link href="http://livsey.org/blog/2013/12/13/introducing-fireplace/"/>
    <updated>2013-12-13T21:33:00+00:00</updated>
    <id>http://livsey.org/blog/2013/12/13/introducing-fireplace</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been using <a href="http://firebase.com">Firebase</a> with <a href="http://emberjs.com">Ember.js</a> quite a lot recently and have just
released <a href="http://github.com/rlivsey/fireplace">Fireplace</a>, a library to integrate the two more easily. It&#8217;s been
extracted from a rather large application so is driven from real world usage.</p>

<p>There&#8217;s <a href="https://github.com/firebase/emberFire">EmberFire</a> but, aside from it not existing when I started to write Fireplace,
it doesn&#8217;t support relationships or many other basic / advanced features I&#8217;d want in an Ember persistence library.</p>

<p>Anyone who&#8217;s used <a href="https://github.com/ebryn/ember-model">Ember Model</a> or <a href="https://github.com/emberjs/data">Ember Data</a>
should feel at home with Fireplace as I&#8217;ve taken inspiration (and code) from many parts of them when developing it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">attr</span>    <span class="o">=</span> <span class="nx">FP</span><span class="p">.</span><span class="nx">attr</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">hasMany</span> <span class="o">=</span> <span class="nx">FP</span><span class="p">.</span><span class="nx">hasMany</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Person</span> <span class="o">=</span> <span class="nx">FP</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">firstName</span><span class="o">:</span>   <span class="nx">attr</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">lastName</span><span class="o">:</span>    <span class="nx">attr</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">dateOfBirth</span><span class="o">:</span> <span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;date&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">isAdmin</span><span class="o">:</span>     <span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;boolean&quot;</span><span class="p">,</span> <span class="p">{</span><span class="k">default</span><span class="o">:</span> <span class="kc">false</span><span class="p">}),</span>
</span><span class='line'>  <span class="nx">addresses</span><span class="o">:</span>   <span class="nx">hasMany</span><span class="p">()</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Address</span> <span class="o">=</span> <span class="nx">FP</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">street</span><span class="o">:</span>   <span class="nx">attr</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">city</span><span class="o">:</span>     <span class="nx">attr</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">postcode</span><span class="o">:</span> <span class="nx">attr</span><span class="p">()</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fireplace has full support for promises, so fits in nicely with Ember&#8217;s router:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PeopleIndexRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="s2">&quot;person&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">limit</span><span class="o">:</span> <span class="mi">10</span><span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PeopleShowRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="s2">&quot;person&quot;</span><span class="p">,</span> <span class="nx">params</span><span class="p">.</span><span class="nx">person_id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check out the <a href="http://github.com/rlivsey/fireplace">project on Github</a> for more details.</p>

<p>Feedback &amp; pull requests are very welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cache Busting with Rake Pipeline]]></title>
    <link href="http://livsey.org/blog/2013/05/16/cache-busting-with-rake-pipeline/"/>
    <updated>2013-05-16T18:24:00+01:00</updated>
    <id>http://livsey.org/blog/2013/05/16/cache-busting-with-rake-pipeline</id>
    <content type="html"><![CDATA[<p>I&#8217;m using <a href="https://github.com/livingsocial/rake-pipeline">rake-pipeline</a> on a project at the moment and wanted to implement cache-busting by renaming asset files if they have changes.</p>

<p>A quick look at <a href="https://github.com/wycats/rake-pipeline-web-filters">rake-pipeline-web-filters</a> and we see the <a href="https://github.com/wycats/rake-pipeline-web-filters/blob/master/lib/rake-pipeline-web-filters/cache_buster_filter.rb">Cache Buster</a> filter, it looks just the job:</p>

<figure class='code'><figcaption><span>Assetfile  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">output</span> <span class="s2">&quot;public&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">input</span> <span class="s2">&quot;app&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">match</span> <span class="s2">&quot;javascripts/**/*.coffee&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">coffee_script</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">match</span> <span class="s2">&quot;javascripts/**/*.js&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">concat</span> <span class="s2">&quot;javascripts/app.js&quot;</span>
</span><span class='line'>    <span class="n">cache_buster</span>
</span><span class='line'>    <span class="n">uglify</span>
</span><span class='line'>    <span class="n">gzip</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, not so fast. That would have been a rather short blog post&#8230;</p>

<p>It turns out that the cache buster <a href="https://github.com/wycats/rake-pipeline-web-filters/issues/27">doesn&#8217;t work if it&#8217;s after a concat</a> and this is an issue which is impossible to fix with the way rake-pipeline works.</p>

<p>Rake pipeline filters generate the filenames they output when they are initialized, which means you can&#8217;t have a filter which has a filename based on the output of a previous filter as you&#8217;d want for cache busting. When the cache buster tries to generate the filename the concat hasn&#8217;t yet happened so it has no contents to work with.</p>

<p>If we can&#8217;t dynamically change the filename in a filter, how do we write a cache buster for rake-pipeline which actually works? We need to check all the files <em>before</em> rake-pipeline runs and use that knowledge to set the output name, something like:</p>

<figure class='code'><figcaption><span>Assetfile  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">output</span> <span class="s2">&quot;public&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">JS_VERSION</span> <span class="o">=</span> <span class="sc">??</span> <span class="c1"># magic happens here</span>
</span><span class='line'>
</span><span class='line'><span class="n">input</span> <span class="s2">&quot;app&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">match</span> <span class="s2">&quot;javascripts/**/*.coffee&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">coffee_script</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">match</span> <span class="s2">&quot;javascripts/**/*.js&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">concat</span> <span class="s2">&quot;javascripts/app-</span><span class="si">#{</span><span class="no">JS_VERSION</span><span class="si">}</span><span class="s2">.js&quot;</span>
</span><span class='line'>    <span class="n">uglify</span>
</span><span class='line'>    <span class="n">gzip</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But how do we set <code>JS_VERSION</code>?</p>

<p>We want to generate some kind of key based on the contents of the files in the <code>javascripts</code> directory which will only change if
there&#8217;s a change to the files. We could iterate through each of the files and get the MD5 hash of each, then take an MD5 of all the hashes to generate one master hash, or maybe we loop through and find the most recent mtime and generate a key from that? All sounds a bit messy and resource intensive for such a simple task.</p>

<p>If only there was a way we could find out the last change of a file in a directory, some kind of system which tracked all the versions of our files that we could ask&#8230;</p>

<p>Turns out git is quite good at tracking changes to files, it&#8217;s also rather easy to get a log of what&#8217;s changed in a directory and we can ask for the hash of the most recent change with <code>git log -n1 --pretty=format:"%H" app/javascripts</code>.</p>

<p>Plugging that into the above we get:</p>

<figure class='code'><figcaption><span>Assetfile  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">output</span> <span class="s2">&quot;public&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">JS_VERSION</span> <span class="o">=</span> <span class="sb">`git log -n1 --pretty=format:&quot;%H&quot; app/javascripts`</span>
</span><span class='line'>
</span><span class='line'><span class="n">input</span> <span class="s2">&quot;app&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">match</span> <span class="s2">&quot;javascripts/**/*.coffee&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">coffee_script</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">match</span> <span class="s2">&quot;javascripts/**/*.js&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">concat</span> <span class="s2">&quot;javascripts/app-</span><span class="si">#{</span><span class="no">JS_VERSION</span><span class="si">}</span><span class="s2">.js&quot;</span>
</span><span class='line'>    <span class="n">uglify</span>
</span><span class='line'>    <span class="n">gzip</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have a new <code>JS_VERSION</code> any time there are any changes committed to the app/javascripts directory.</p>

<p>Job done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tick Tock - Tracking the passage of time in Ember.js]]></title>
    <link href="http://livsey.org/blog/2013/02/20/tick-tock/"/>
    <updated>2013-02-20T16:12:00+00:00</updated>
    <id>http://livsey.org/blog/2013/02/20/tick-tock</id>
    <content type="html"><![CDATA[<p>Lets say you let your users edit comments they&#8217;ve posted for up to 5 minutes, we want to display an edit
button on all comments posted by the current person until that 5 minutes is over.</p>

<p>Our comment template might look something like this:</p>

<figure class='code'><figcaption><span>comment.handlebars  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;p&gt;</span>{{content}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>By: {{postedBy.fullName}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>{{#if isEditable}}<span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="na">edit</span><span class="err">}}</span><span class="nt">&gt;</span>edit<span class="nt">&lt;/button&gt;</span>{{/if}}<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This could be backed by a fairly simple controller for the comment:</p>

<figure class='code'><figcaption><span>comment-controller.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">CommentController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">isEditable</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fiveMinutesInMs</span> <span class="o">=</span> <span class="mi">5</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fiveMinutesAgo</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">setTime</span><span class="p">(</span><span class="nx">now</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">-</span> <span class="nx">fiveMinutesInMs</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;postedBy&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;currentPerson&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>           <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;postedAt&quot;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">fiveMinutesAgo</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s2">&quot;postedBy&quot;</span><span class="p">,</span> <span class="s2">&quot;currentPerson&quot;</span><span class="p">,</span> <span class="s2">&quot;postedAt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>currentPerson</code> could be bound to another controller or injected into all controllers depending on how
your app works.</p>

<p>That covers only showing the edit button if the comment was posted by the current logged in person and
is less than 5 minutes old.</p>

<p>That&#8217;s all good, but we want to automatically hide the edit button once 5 minutes has elapsed so we need to
track the passage of time too. We could add a timer to the controller and have that tick every minute or so:</p>

<figure class='code'><figcaption><span>comment-controller.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">CommentController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">tick</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">tick</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// forces isEditable to be recalculated as it&#39;s bound to `postedAt`</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">notifyPropertyChange</span><span class="p">(</span><span class="s2">&quot;postedAt&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">oneMinute</span> <span class="o">=</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span> <span class="nx">self</span><span class="p">.</span><span class="nx">tick</span><span class="p">();</span> <span class="p">},</span> <span class="nx">oneMinute</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;ll work, but then every single comment which is displayed will have its own timer set. It&#8217;s also something we&#8217;ll end up
repeating in every bit of the app which does something based on the time.</p>

<p>How about we move it into the view?</p>

<figure class='code'><figcaption><span>comment-view.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">CommentView</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">didInsertElement</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">tick</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">willDestroyElement</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">clearTimeout</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_timer</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">tick</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// forces isEditable to be recalculated as it&#39;s bound to `postedAt`</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;content&quot;</span><span class="p">).</span><span class="nx">notifyPropertyChange</span><span class="p">(</span><span class="s2">&quot;postedAt&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">oneMinute</span> <span class="o">=</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span> <span class="nx">self</span><span class="p">.</span><span class="nx">tick</span><span class="p">();</span> <span class="p">},</span> <span class="nx">oneMinute</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">isEditable</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// as before</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s2">&quot;content.postedBy&quot;</span><span class="p">,</span> <span class="s2">&quot;controller.currentPerson&quot;</span><span class="p">,</span> <span class="s2">&quot;content.postedAt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm, that&#8217;s better in that we know when the timer is kicked off and we can tear it down when the comment is
removed from the view, but we&#8217;d have to update the template to point to <code>view.isEditable</code> and <code>isEditable</code>
is getting a bit unweildy having to bind to <code>content</code> and <code>controller</code>. If it&#8217;s ugly it probably isn&#8217;t right,
so lets scrap this train of thought and rethink things.</p>

<p>We know that every comment needs to know the current time and be updated when it changes, so lets introduce
a domain object to model that:</p>

<figure class='code'><figcaption><span>clock.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ONE_SECOND</span> <span class="o">=</span> <span class="mi">1000</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Clock</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">second</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">minute</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">hour</span><span class="o">:</span>   <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">tick</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">tick</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setProperties</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">second</span><span class="o">:</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getSeconds</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">minute</span><span class="o">:</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">hour</span><span class="o">:</span>   <span class="nx">now</span><span class="p">.</span><span class="nx">getHours</span><span class="p">()</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span> <span class="nx">self</span><span class="p">.</span><span class="nx">tick</span><span class="p">();</span> <span class="p">},</span> <span class="nx">ONE_SECOND</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s a simple clock that we can instantiate and it&#8217;ll tick every second that our app&#8217;s running.
We can use injections to give every controller access to the same clock instance:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Application</span><span class="p">.</span><span class="nx">initializer</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;clock&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">application</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">optionsForType</span><span class="p">(</span><span class="s1">&#39;clock&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">singleton</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s1">&#39;clock&#39;</span><span class="p">,</span> <span class="s1">&#39;main&#39;</span><span class="p">,</span> <span class="nx">application</span><span class="p">.</span><span class="nx">Clock</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">typeInjection</span><span class="p">(</span><span class="s1">&#39;controller&#39;</span><span class="p">,</span> <span class="s1">&#39;clock&#39;</span><span class="p">,</span> <span class="s1">&#39;clock:main&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// don&#39;t break ObjectController</span>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">ControllerMixin</span><span class="p">.</span><span class="nx">reopen</span><span class="p">({</span> <span class="nx">clock</span><span class="o">:</span> <span class="kc">null</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now every controller has access to the same clock, so lets update our comment controller to use it:</p>

<figure class='code'><figcaption><span>comment-controller.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">CommentController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">isEditable</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// as before</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s2">&quot;postedBy&quot;</span><span class="p">,</span> <span class="s2">&quot;currentPerson&quot;</span><span class="p">,</span> <span class="s2">&quot;postedAt&quot;</span><span class="p">,</span> <span class="s2">&quot;clock.minute&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>All we&#8217;ve done is add <code>clock.minute</code> to the property bindings which causes this to automatically update
once a minute.</p>

<p>We can now reuse that logic anywhere in our application, just add <code>clock.second</code>, <code>clock.minute</code> or <code>clock.hour</code>
to property bindings and they&#8217;ll be automatically re-calculated at the appropriate points in time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Pusher with Ember]]></title>
    <link href="http://livsey.org/blog/2013/02/10/integrating-pusher-with-ember/"/>
    <updated>2013-02-10T19:20:00+00:00</updated>
    <id>http://livsey.org/blog/2013/02/10/integrating-pusher-with-ember</id>
    <content type="html"><![CDATA[<p>The Ember Router takes events from user actions and hands them off to the appropriate
Route depending on where the user is within the app.</p>

<p><a href="http://pusher.com/">Pusher</a> receives events from your server which your app then handles, but you might
want to do different things depending on where your user is within your app at the time the message is received.</p>

<p>Wouldn&#8217;t it be great if we could hook these two things up together?</p>

<p>Here&#8217;s what we&#8217;re going to end up with in a route:</p>

<figure class='code'><figcaption><span>my_route.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">MyRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="c1">// subscribe/unsubscribe to a pusher channel</span>
</span><span class='line'>  <span class="c1">// when we enter/exit this part of the app</span>
</span><span class='line'>  <span class="nx">activate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;pusher&quot;</span><span class="p">).</span><span class="nx">subscribe</span><span class="p">(</span><span class="s2">&quot;a-channel&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">deactivate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;pusher&quot;</span><span class="p">).</span><span class="nx">unsuscribe</span><span class="p">(</span><span class="s2">&quot;a-channel&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// handle event from pusher just like normal actions</span>
</span><span class='line'>  <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">aMessageFromPusher</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something here</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>First of all, lets define a <code>Pusher</code> object which will handle subscribing and unsubscribing to channels, and dispatches
any messages we receive from Pusher to the router:</p>

<figure class='code'><figcaption><span>pusher.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Pusher</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">key</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Pusher</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;key&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">service</span><span class="p">.</span><span class="nx">connection</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;connected&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">_this</span><span class="p">.</span><span class="nx">connected</span><span class="p">();</span> <span class="p">});</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">service</span><span class="p">.</span><span class="nx">bind_all</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="nx">_this</span><span class="p">.</span><span class="nx">handleEvent</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">connected</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">socketId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">service</span><span class="p">.</span><span class="nx">connection</span><span class="p">.</span><span class="nx">socket_id</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">addSocketIdToXHR</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// add X-Pusher-Socket header so we can exclude the sender from their own actions</span>
</span><span class='line'>  <span class="c1">// http://pusher.com/docs/server_api_guide/server_excluding_recipients</span>
</span><span class='line'>  <span class="nx">addSocketIdToXHR</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">Ember</span><span class="p">.</span><span class="nx">$</span><span class="p">.</span><span class="nx">ajaxPrefilter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="nx">originalOptions</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;X-Pusher-Socket&#39;</span><span class="p">,</span> <span class="nx">_this</span><span class="p">.</span><span class="nx">socketId</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">subscribe</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">service</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">channel</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">unsubscribe</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">service</span><span class="p">.</span><span class="nx">unsubscribe</span><span class="p">(</span><span class="nx">channel</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">router</span><span class="p">,</span> <span class="nx">unhandled</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ignore pusher internal events</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">eventName</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^pusher:/</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">router</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;container&quot;</span><span class="p">).</span><span class="nx">lookup</span><span class="p">(</span><span class="s2">&quot;router:main&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">router</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">unhandled</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/Nothing handled the event/</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">unhandled</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">e</span> <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most of that is pretty straight-forward, we&#8217;re just wrapping some basic Pusher functionality and listening for
any message which we get sent. Let&#8217;s take a closer look at the meat of the <code>handleEvent</code> method:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;container&quot;</span><span class="p">).</span><span class="nx">lookup</span><span class="p">(</span><span class="s2">&quot;router:main&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">unhandled</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/Nothing handled the event/</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">unhandled</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">e</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s no longer a global <code>App.router</code> we can access in Ember, so we need to get the router from the <code>container</code>,
then we simply pass <code>send</code> the event and data we got from Pusher. This will then trigger
the event on the current route, or the first of its parents which handle the event.</p>

<p>If the event goes unhandled Ember will raise an error, normally we want this to make sure we&#8217;re not
exposing functionality the current route can&#8217;t handle, but in this case we have no control of where
the user is within our app when a message from Pusher.</p>

<p>How does our Pusher object get the container, and how do our controllers and routes get
access to Pusher? We do this with injections in an initializer:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Application</span><span class="p">.</span><span class="nx">initializer</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;pusher&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">application</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// use the same instance of Pusher everywhere in the app</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">optionsForType</span><span class="p">(</span><span class="s1">&#39;pusher&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">singleton</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// register &#39;pusher:main&#39; as our Pusher object</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s1">&#39;pusher&#39;</span><span class="p">,</span> <span class="s1">&#39;main&#39;</span><span class="p">,</span> <span class="nx">application</span><span class="p">.</span><span class="nx">Pusher</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// inject the Pusher object into all controllers and routes</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">typeInjection</span><span class="p">(</span><span class="s1">&#39;controller&#39;</span><span class="p">,</span> <span class="s1">&#39;pusher&#39;</span><span class="p">,</span> <span class="s1">&#39;pusher:main&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">typeInjection</span><span class="p">(</span><span class="s1">&#39;route&#39;</span><span class="p">,</span> <span class="s1">&#39;pusher&#39;</span><span class="p">,</span> <span class="s1">&#39;pusher:main&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now any controller or route which is instantiated will automatically have an instance of our
Pusher object injected into it.</p>

<p>This causes a bit of a problem with controllers which extend from <code>ObjectController</code> as it will try
and set <code>pusher</code> on them before they have any content assigned and raise the following error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cannot delegate set('pusher', pusher) to the 'content' property
</span><span class='line'>of object proxy &lt;Ember.ObjectProxy:ember420>: its 'content' is undefined</span></code></pre></td></tr></table></div></figure>


<p>To address this, we can reopen <code>ControllerMixin</code> to assign a default null value for <code>pusher</code>. As
<code>ObjectController</code> mixes in <code>ControllerMixin</code> it now has its own <code>pusher</code> property and the error is
avoided:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">ControllerMixin</span><span class="p">.</span><span class="nx">reopen</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">pusher</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now in your <code>app.js</code> or wherever you kick-off your app, we can re-open <code>App.Pusher</code> to set the API key:</p>

<figure class='code'><figcaption><span>app.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Pusher</span><span class="p">.</span><span class="nx">reopen</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;your-pusher-key&quot;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Job done, now any messages received from Pusher will trigger events on your routes and you can handle them just
like normal user actions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a helper to check permissions in Ember.js]]></title>
    <link href="http://livsey.org/blog/2012/10/16/writing-a-helper-to-check-permissions-in-ember-dot-js/"/>
    <updated>2012-10-16T14:41:00+01:00</updated>
    <id>http://livsey.org/blog/2012/10/16/writing-a-helper-to-check-permissions-in-ember-dot-js</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>Lets say we&#8217;re writing a blog which allows users to login, but only certain users can write and edit articles.
We want to display add/edit buttons based on permissions, so how do we do that?</p>

<p>For simple permissions, this is quite trivial. For example, to check if the current logged in user is an
administrator we can just do something like:</p>

<figure class='code'><figcaption><span>blog/index.handlebars  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  {{#if App.currentUser.isAdmin}}
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="na">newBlogPost</span><span class="err">}}</span><span class="nt">&gt;</span>New Post<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  {{/if}}
</span></code></pre></td></tr></table></div></figure>


<p>This only works if we have a single property and we can&#8217;t pass any arguments, which means the following won&#8217;t work:</p>

<figure class='code'><figcaption><span>blog/index.handlebars  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  {{#if App.currentUser.canEditPost post }}
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="na">editPost</span> <span class="na">post</span><span class="err">}}</span><span class="nt">&gt;</span>edit<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  {{/if}}
</span></code></pre></td></tr></table></div></figure>


<h2>Research</h2>

<p>What we want is a version of <code>if</code> which knows about permissions and will let us pass in arguments so that we can end up with something like this:</p>

<figure class='code'><figcaption><span>blog/index.handlebars  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  {{#can createPost}}
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="na">newBlogPost</span><span class="err">}}</span><span class="nt">&gt;</span>New Post<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  {{else}}
</span><span class='line'>    You don&#39;t have permission to post
</span><span class='line'>  {{/can}}
</span><span class='line'>
</span><span class='line'>  {{#each post in controller}}
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="err">{{</span><span class="na">action</span> <span class="na">viewPost</span> <span class="na">post</span> <span class="na">href=</span><span class="s">true}}</span><span class="nt">&gt;</span>{{post.title}}<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    {{#can editPost post}}
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="na">editPost</span> <span class="na">post</span><span class="err">}}</span><span class="nt">&gt;</span>Edit<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    {{/can}}
</span><span class='line'>  {{/each}}
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s take a look at <a href="https://github.com/emberjs/ember.js/blob/bbb6f5f0bd7d9f6f1951fc2306f09b4be3fcfb7d/packages/ember-handlebars/lib/helpers/binding.js#L217">from the source</a>
and see how <code>if</code> works:</p>

<figure class='code'><figcaption><span>ember-handlebars/lib/helpers/binding.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;if&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="s2">&quot;You must pass exactly one argument to the if helper&quot;</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="s2">&quot;You must pass a block to the if helper&quot;</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">fn</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">fn</span> <span class="o">!==</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">VM</span><span class="p">.</span><span class="nx">noop</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">helpers</span><span class="p">.</span><span class="nx">boundIf</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">contexts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This just does some sanity checking and hands off to <a href="https://github.com/emberjs/ember.js/blob/bbb6f5f0bd7d9f6f1951fc2306f09b4be3fcfb7d/packages/ember-handlebars/lib/helpers/binding.js#L151"><code>boundIf</code></a>:</p>

<figure class='code'><figcaption><span>ember-handlebars/lib/helpers/binding.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;boundIf&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">property</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">contexts</span> <span class="o">&amp;&amp;</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">contexts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">||</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">Ember</span><span class="p">.</span><span class="nx">typeOf</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;array&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">get</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="s1">&#39;length&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">!!</span><span class="nx">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">bind</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">property</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">func</span><span class="p">,</span> <span class="nx">func</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This in turn calls <code>bind</code> which handles setting up all the observers and re-rendering when properties change. The result of the <code>func</code> it builds
determines whether to display the content or not.</p>

<p>It looks like if we create a helper which calls <code>boundIf</code> with some property to observe on an object, it will take care of the rest for us.</p>

<figure class='code'><figcaption><span>can-helper.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;can&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">permissionName</span><span class="p">,</span> <span class="nx">property</span><span class="p">,</span> <span class="nx">options</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// do magic here</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helpers</span><span class="p">.</span><span class="nx">boundIf</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">someObject</span><span class="p">,</span> <span class="s2">&quot;someProperty&quot;</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets fake out the magic and see what happens:</p>

<figure class='code'><figcaption><span>can-helper.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;can&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">permissionName</span><span class="p">,</span> <span class="nx">property</span><span class="p">,</span> <span class="nx">options</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">permission</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">can</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">property</span><span class="p">()</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helpers</span><span class="p">.</span><span class="nx">boundIf</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">permission</span><span class="p">,</span> <span class="s2">&quot;can&quot;</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm, that leaves the content as hidden. It seems that it&#8217;s not calling the <code>can</code> on our permission.</p>

<p>If we look back at <code>boundIf</code> then we can see that it&#8217;s looking up the context on the options and only falls back to <code>this</code> if
there&#8217;s not one set:</p>

<figure class='code'><figcaption><span>ember-handlebars/lib/helpers/binding.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">contexts</span> <span class="o">&amp;&amp;</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">contexts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">||</span> <span class="k">this</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can get around this by nuking the contexts on the options we pass through to <code>boundIf</code>.
(I&#8217;m not sure if this will cause issues, but it worked for me&#8230; YMMV and all that).</p>

<figure class='code'><figcaption><span>can-helper.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;can&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">permissionName</span><span class="p">,</span> <span class="nx">property</span><span class="p">,</span> <span class="nx">options</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">permission</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">can</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">property</span><span class="p">()</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// wipe out contexts so boundIf uses `this` (the permission) as the context</span>
</span><span class='line'>  <span class="nx">options</span><span class="p">.</span><span class="nx">contexts</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helpers</span><span class="p">.</span><span class="nx">boundIf</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">permission</span><span class="p">,</span> <span class="s2">&quot;can&quot;</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you twiddle the result of <code>can</code> from <code>true</code> to <code>false</code> then we see our content disappear and re-appear, success!</p>

<h2>Implementation</h2>

<p>Lets define a class to represent our actual permission:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">Permission</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">content</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">currentUserBinding</span><span class="o">:</span> <span class="s2">&quot;App.currentUser&quot;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">CanCreatePost</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Permission</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">can</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;currentUser.isAdmin&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s2">&quot;currentUser.isAdmin&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want to refer to this with a more friendly name in our templates, we could figure out that <code>createPost</code> maps to <code>App.CanCreatePost</code> by
capitalizing and prepending with &#8216;Can&#8217;, but instead lets make a simple registry:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">Permissions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">_perms</span><span class="o">:</span>    <span class="p">{},</span>
</span><span class='line'>    <span class="nx">register</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">klass</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">_perms</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">klass</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">get</span><span class="o">:</span>      <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_perms</span><span class="p">[</span><span class="nx">name</span><span class="p">].</span><span class="nx">create</span><span class="p">(</span><span class="nx">attrs</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">can</span><span class="o">:</span>      <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;can&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This lets us register new permissions anywhere and assigns a friendly name which we can use throughout our app.</p>

<figure class='code'><figcaption><span>blog/permissions.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">Permissions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;createPost&quot;</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Permission</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">can</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;currentUser.isAdmin&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s2">&quot;currentUser.isAdmin&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">Permissions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;editPost&quot;</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Permission</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">can</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;currentUser.isAdmin&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;content.author.id&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;currentUser.id&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s2">&quot;currentUser.isAdmin&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now have a couple of permissions which have a <code>can</code> property we can bind to and friendly names to lookup from the templates.
All our helper needs to do is take the passed in name, create an appropriate permission with any attributes and pass that off
to the <code>boundIf</code> helper.</p>

<p>After bit of trial and error, I ended up with the following:</p>

<figure class='code'><figcaption><span>can-helper.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">get</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">get</span><span class="p">,</span> <span class="nx">isGlobalPath</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">isGlobalPath</span><span class="p">,</span> <span class="nx">normalizePath</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">normalizePath</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">getProp</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">property</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">isGlobalPath</span><span class="p">(</span><span class="nx">property</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">get</span><span class="p">(</span><span class="nx">property</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">normalizePath</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">property</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">get</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">root</span><span class="p">,</span> <span class="nx">path</span><span class="p">.</span><span class="nx">path</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;can&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">permissionName</span><span class="p">,</span> <span class="nx">property</span><span class="p">,</span> <span class="nx">options</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">permission</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// property is optional, if we&#39;ve only got 2 arguments then the property contains our options</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span> <span class="o">=</span> <span class="nx">property</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">property</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">context</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">contexts</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">contexts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">||</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">attrs</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// if we&#39;ve got a property name, get its value and set it to the permission&#39;s content</span>
</span><span class='line'>    <span class="c1">// this will set the passed in `post` to the content eg:</span>
</span><span class='line'>    <span class="c1">// {{#can editPost post}} ... {{/can}}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">property</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">attrs</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="nx">getProp</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">property</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// if we&#39;ve got any options, find their values eg:</span>
</span><span class='line'>    <span class="c1">// {{#can createPost project:Project user:App.currentUser}} ... {{/can}}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">options</span><span class="p">.</span><span class="nx">hash</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">path</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">hash</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>      <span class="nx">attrs</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">getProp</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// find &amp; create the permission with the supplied attributes</span>
</span><span class='line'>    <span class="nx">permission</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Permissions</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">permissionName</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ensure boundIf uses permission as context and not the view/controller</span>
</span><span class='line'>    <span class="c1">// otherwise it looks for &#39;can&#39; in the wrong place</span>
</span><span class='line'>    <span class="nx">options</span><span class="p">.</span><span class="nx">contexts</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// bind it all together and kickoff the observers</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helpers</span><span class="p">.</span><span class="nx">boundIf</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">permission</span><span class="p">,</span> <span class="s2">&quot;can&quot;</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it, now we can show/hide content based on user permissions and have them automatically update when a user
logs in or their permissions change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking up your routes in Ember.js]]></title>
    <link href="http://livsey.org/blog/2012/10/09/breaking-up-your-routes-in-ember-dot-js/"/>
    <updated>2012-10-09T18:01:00+01:00</updated>
    <id>http://livsey.org/blog/2012/10/09/breaking-up-your-routes-in-ember-dot-js</id>
    <content type="html"><![CDATA[<p>The router is the core of any <a href="http://emberjs.com">Ember.js</a> application and it can get big, fast.
Keeping your entire application&#8217;s router in one file is going to lead to madness. Thankfully it&#8217;s quite a simple problem to resolve.</p>

<p>Lets imagine an application with a number of discrete sections - a blog, a list of members and an area to browse uploaded files.
We have an <code>init.js</code> which sets up the application:</p>

<figure class='code'><figcaption><span>init.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">Router</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">root</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">home</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>      <span class="p">}),</span>
</span><span class='line'>      <span class="nx">blog</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/blog&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">posts</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>        <span class="p">}),</span>
</span><span class='line'>        <span class="nx">post</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/:id&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>      <span class="p">}),</span>
</span><span class='line'>      <span class="nx">members</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/members&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">list</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>        <span class="p">}),</span>
</span><span class='line'>        <span class="nx">member</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/:id&quot;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>      <span class="p">}),</span>
</span><span class='line'>      <span class="nx">files</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/files&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">list</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>        <span class="p">}),</span>
</span><span class='line'>        <span class="nx">file</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/:id&quot;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks pretty straightforward, but that&#8217;s without any outlet management, serializing/deserializing, action handlers etc&#8230;</p>

<p>Breaking this up is pretty simple.
Anywhere we say <code>Ember.Route.extend</code> we&#8217;re defining an anonymous class,
so in order to split up the router we can just give the class a name and move it to a file of its own.</p>

<figure class='code'><figcaption><span>routes/homepage.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">HomePageRoutes</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>routes/blog.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">BlogRoutes</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/blog&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">posts</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>    <span class="p">}),</span>
</span><span class='line'>    <span class="nx">post</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/:id&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>routes/members.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">MembersRoutes</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/members&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">list</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>    <span class="p">}),</span>
</span><span class='line'>    <span class="nx">member</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/:id&quot;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>routes/files.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">FilesRoutes</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/files&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">list</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>    <span class="p">}),</span>
</span><span class='line'>    <span class="nx">file</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/:id&quot;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our main router definition looks like:</p>

<figure class='code'><figcaption><span>init.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">Router</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">root</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">home</span><span class="o">:</span> <span class="nx">App</span><span class="p">.</span><span class="nx">HomePageRoutes</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">blog</span><span class="o">:</span> <span class="nx">App</span><span class="p">.</span><span class="nx">BlogRoutes</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">members</span><span class="o">:</span> <span class="nx">App</span><span class="p">.</span><span class="nx">MembersRoutes</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">files</span><span class="o">:</span> <span class="nx">App</span><span class="p">.</span><span class="nx">FilesRoutes</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clean, simple and everything in its own place.</p>

<p><strong>Update</strong>: As <a href="http://livsey.org/blog/2012/10/09/breaking-up-your-routes-in-ember-dot-js/#comment-677694778">Jo Liss points out</a>,
you can specify the base route when you assemble the router as opposed to hard coding it in each section. I really like this, feels very similar to
how <a href="http://api.rubyonrails.org/classes/Rails/Engine.html">engines are mounted in Rails</a>.</p>

<figure class='code'><figcaption><span>init.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">Router</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">root</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">home</span><span class="o">:</span> <span class="nx">App</span><span class="p">.</span><span class="nx">HomePageRoutes</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>      <span class="p">}),</span>
</span><span class='line'>      <span class="nx">blog</span><span class="o">:</span> <span class="nx">App</span><span class="p">.</span><span class="nx">BlogRoutes</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/blog&quot;</span>
</span><span class='line'>      <span class="p">}),</span>
</span><span class='line'>      <span class="nx">members</span><span class="o">:</span> <span class="nx">App</span><span class="p">.</span><span class="nx">MembersRoutes</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/members&quot;</span>
</span><span class='line'>      <span class="p">}),</span>
</span><span class='line'>      <span class="nx">files</span><span class="o">:</span> <span class="nx">App</span><span class="p">.</span><span class="nx">FilesRoutes</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">route</span><span class="o">:</span> <span class="s2">&quot;/files&quot;</span>
</span><span class='line'>      <span class="p">}),</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Does your User care about authentication?]]></title>
    <link href="http://livsey.org/blog/2012/02/23/should-your-user-care-about-authentication/"/>
    <updated>2012-02-23T14:32:00+00:00</updated>
    <id>http://livsey.org/blog/2012/02/23/should-your-user-care-about-authentication</id>
    <content type="html"><![CDATA[<p>These are my notes from a lightning talk I gave at <a href="http://lanyrd.com/2012/lrug-february/">this months LRUG</a>.</p>

<p>We&#8217;ve got a Rails app which lets a user login with a username and password, nothing out of the ordinary:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">current_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">authenticate_with_password</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">root_url</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate_with_password</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">first</span><span class="p">(</span><span class="n">username</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:username</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>      <span class="n">try</span><span class="p">(</span><span class="ss">:authenticate_password</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate_password</span><span class="p">(</span><span class="n">unencrypted_password</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">BCrypt</span><span class="o">::</span><span class="no">Password</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">password_digest</span><span class="p">)</span> <span class="o">==</span> <span class="n">unencrypted_password</span>
</span><span class='line'>      <span class="nb">self</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>SessionsController#create tries to find a User with the supplied username and password and then redirects or re-displays the login form.</p>

<p>A few months go by and we decide to let users login against a number of third party services, using something like <a href="https://github.com/intridea/omniauth">OmniAuth</a>
to do the actual heavy lifting of communicating with the providers. Our controller and model have bloated a fair bit:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">current_user</span> <span class="o">=</span>  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:facebook_id</span><span class="o">]</span>
</span><span class='line'>                              <span class="no">User</span><span class="o">.</span><span class="n">authenticate_with_facebook</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>                            <span class="k">elsif</span> <span class="n">params</span><span class="o">[</span><span class="ss">:google_id</span><span class="o">]</span>
</span><span class='line'>                              <span class="no">User</span><span class="o">.</span><span class="n">authenticate_with_google</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>                            <span class="k">elsif</span> <span class="n">params</span><span class="o">[</span><span class="ss">:twitter_id</span><span class="o">]</span>
</span><span class='line'>                              <span class="no">User</span><span class="o">.</span><span class="n">authenticate_with_twitter</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>                            <span class="k">elsif</span> <span class="n">params</span><span class="o">[</span><span class="ss">:github_id</span><span class="o">]</span>
</span><span class='line'>                              <span class="no">User</span><span class="o">.</span><span class="n">authenticate_with_github</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>                            <span class="k">else</span>
</span><span class='line'>                              <span class="no">User</span><span class="o">.</span><span class="n">authenticate_with_password</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>                            <span class="k">end</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">root_url</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate_with_password</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">first</span><span class="p">(</span><span class="n">username</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:username</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:authenticate_password</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate_with_facebook</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">first</span><span class="p">(</span><span class="n">facebook_id</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:facebook_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate_with_google</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">first</span><span class="p">(</span><span class="n">google_id</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:google_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate_with_twitter</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">first</span><span class="p">(</span><span class="n">twitter_id</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:twitter_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate_with_github</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">first</span><span class="p">(</span><span class="n">github_id</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:github_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate_password</span><span class="p">(</span><span class="n">unencrypted_password</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">BCrypt</span><span class="o">::</span><span class="no">Password</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">password_digest</span><span class="p">)</span> <span class="o">==</span> <span class="n">unencrypted_password</span>
</span><span class='line'>      <span class="nb">self</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s not much good to say about that code, but I&#8217;ve seen similar things in plenty of apps over the years. At least we&#8217;re not doing the db calls directly in the controller.</p>

<h2>Single Responsibility Principle</h2>

<p>The <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle</a> basically says that an object should be responsible for one thing only.
Thinking about that another way, we can also say that a single change should only touch one part of the system.</p>

<p>With the code as it stands, if we add or remove an authentication method we&#8217;ve got to change code in both the controller and the model.
Fixing that is pretty simple, let&#8217;s just move the logic for deciding which authentication method we&#8217;re using into the model:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">current_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">root_url</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:facebook_id</span><span class="o">]</span>
</span><span class='line'>      <span class="n">authenticate_with_facebook</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">params</span><span class="o">[</span><span class="ss">:google_id</span><span class="o">]</span>
</span><span class='line'>      <span class="n">authenticate_with_google</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">params</span><span class="o">[</span><span class="ss">:twitter_id</span><span class="o">]</span>
</span><span class='line'>      <span class="n">authenticate_with_twitter</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">params</span><span class="o">[</span><span class="ss">:github_id</span><span class="o">]</span>
</span><span class='line'>      <span class="n">authenticate_with_github</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">authenticate_with_password</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All tidy, now if we change how authentication works we only have to make changes in one part of the codebase.</p>

<h2>Skinny controllers, fat models</h2>

<p>This is basically the <a href="http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model">skinny controllers, fat models</a> principle which encourages moving your business logic out of your controllers and into your models.</p>

<p>This lets us keep nice clean controllers and views, but we can end up with massively bloated models.
What we should aim for is not just skinny controllers, but skinny models too. In fact, we want really want everything to be skinny.
Lets do some refactoring!</p>

<h2>When all you have is a hammer&#8230;</h2>

<p>Being a Ruby developer, our first port of call is simply to move out the authentication code into a module,
using the standard include/extend pattern to bring both class and instance methods along:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">UserAccess</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">UserAccess</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="no">ClassMethods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">authenticate_with_password</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">authenticate_with_facebook</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate_password</span><span class="p">(</span><span class="n">unencrypted_password</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://api.rubyonrails.org/classes/ActiveSupport/Concern.html">ActiveSupport::Concern</a> can clean this up a little bit and brings a few other tricks to the table.</p>

<h2>Have we actually done anything?</h2>

<p>We&#8217;ve got better organised code and given this concept of &#8220;user access&#8221; a name by wrapping it up in a module.
We&#8217;ve also made it easier to test as we can test this module outside of Rails making our tests faster, which is nice.</p>

<p>In effect all we&#8217;re doing is cleaning up the source so it&#8217;s easier to find things, we&#8217;re not modelling the problem any better.
We&#8217;re still treating the User as a bucket of methods without giving any real thought as to where these things belong.</p>

<p>Over time we include more and more functionality into the one model, hardly a &#8220;single responsibility&#8221;:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">UserAccess</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">NameAccessors</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">LoginAuditing</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">UserSerialising</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">RecencyLogging</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">UserInvites</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">UserAvatar</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">UserPermissions</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Kitchen</span><span class="o">::</span><span class="no">Sink</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What should the User care about?</h2>

<p>All the User class should really care about is persistence - storing and retreiving the attributes from the database.</p>

<p>Anything other than that is really outside of its scope, I&#8217;d argue that even observers, validation &amp; callbacks don&#8217;t belong in the model most of the time.</p>

<p>If we look back at the UserAccess module, it&#8217;s pretty self contained and would quite happily exist outside of the User model.
Other than the <code>#authenticate_password</code> method it&#8217;s all just class methods which go off and try and find a User.</p>

<p>With very few changes we can make this a stand-alone module:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">UserAccess</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate_with_password</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="n">username</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:username</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">BCrypt</span><span class="o">::</span><span class="no">Password</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:password_digest</span><span class="p">))</span> <span class="o">==</span> <span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span>
</span><span class='line'>      <span class="n">user</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate_with_facebook</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve inlined the instance method, it could just as easily be another class method which takes the user and password, it doesn&#8217;t really matter at this point.
The important thing is that it has allowed us to remove the mixin from the User model, leaving it doing just one thing - handling persistence.</p>

<p>The controller needs changing to point to our new stand-alone module, but that&#8217;s a trivial change:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">current_user</span> <span class="o">=</span> <span class="no">UserAccess</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">root_url</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Skinny controller, skinny model, we&#8217;re done. Right?</h2>

<p>So we&#8217;ve got a nice clean model and a nice clean controller, but what about the UserAccess module?
It&#8217;s a bit of a mess, but at least it&#8217;s swept into one self contained part of the system so we can refactor this without affecting anything else.</p>

<p>Back to the Single Responsibility Principle, lets split up the module into a sub-module per authentication type,
that way each is nicely self contained and responsible purely for the one authentication scheme:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">UserAccess</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:facebook_id</span><span class="o">]</span>
</span><span class='line'>      <span class="no">Facebook</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">params</span><span class="o">[</span><span class="ss">:google_id</span><span class="o">]</span>
</span><span class='line'>      <span class="no">Google</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">params</span><span class="o">[</span><span class="ss">:twitter_id</span><span class="o">]</span>
</span><span class='line'>      <span class="no">Twitter</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">params</span><span class="o">[</span><span class="ss">:github_id</span><span class="o">]</span>
</span><span class='line'>      <span class="no">GitHub</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">Password</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">FaceBook</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Password</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s a bit cleaner, but we&#8217;ve still got that nasty <code>.authenticate</code> method and we&#8217;re back with the problem that if we add or remove an authentication method we&#8217;re going to have
to change code in more than one place. Should the top level <code>UserAccess</code> module really know about the logic which determines which sub-module to use?</p>

<h2>Chain of Responsibility</h2>

<p>What we really want to do is move the logic from the <code>.authenticate</code> method down into the sub-modules.
This is where something like the <a href="http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern">Chain of Responsibility</a> pattern comes in handy.</p>

<p>Instead of choosing which authentication type to use up front, we ask each module one at a time whether it can handle the submitted parameters:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">UserAccess</span>
</span><span class='line'>  <span class="no">AUTH_TYPES</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="no">FaceBook</span><span class="p">,</span>
</span><span class='line'>    <span class="no">Twitter</span><span class="p">,</span>
</span><span class='line'>    <span class="no">GitHub</span><span class="p">,</span>
</span><span class='line'>    <span class="no">Password</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="no">AUTH_TYPES</span><span class="o">.</span><span class="n">detect</span><span class="p">{</span><span class="o">|</span><span class="n">auth</span><span class="o">|</span> <span class="n">auth</span><span class="o">.</span><span class="n">can_handle?</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:authenticate</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">FaceBook</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">can_handle?</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:facebook_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Password</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">can_handle?</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:username</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">params</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:password</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we just loop through the authentication modules and find the first one which can handle the parameters we have and then calls authenticate on it.</p>

<p>Each module is completely responsible for its logic and if we add or remove an authentication method we only have to change one thing.</p>

<p>I&#8217;m using an array of types here to loop through, but you could also just loop through the sub-modules of the <code>UserAccess</code> module.
You could also get rid of the <code>.can_handle?</code> method by just calling <code>.authenticate</code> and returning the User for success, nil for a failure and false if it doesn&#8217;t handle the params,
but I prefer to be explicit and having a return nil vs false can lead to much confusion.</p>

<p>Here&#8217;s a high level overview of what we&#8217;ve ended up with, skinny controller, skinny model and a skinny set of modules all responsible for one thing only:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="no">UserAccess</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">UserAccess</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">FaceBook</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Google</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">GitHub</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Twitter</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Password</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s plenty of other approaches to refactoring code like this, but I hope this gives a few ideas beyond &#8220;I know, I&#8217;ll move it into a module&#8221;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Rack::Proxy to Serve Multiple Rails Apps From the Same Domain &amp; Port]]></title>
    <link href="http://livsey.org/blog/2012/02/23/using-rack-proxy-to-serve-multiple-rails-apps-from-the-same-domain-and-port/"/>
    <updated>2012-02-23T13:38:00+00:00</updated>
    <id>http://livsey.org/blog/2012/02/23/using-rack-proxy-to-serve-multiple-rails-apps-from-the-same-domain-and-port</id>
    <content type="html"><![CDATA[<p>I&#8217;m currently working on a project which has an API backend and a JS frontend which consumes that API.
Both parts are built with Rails and must be served from the same domain and port because of the <a href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policy</a>.</p>

<p>The API will be served from a sub-directory like so:</p>

<ul>
<li>http://example.com - serves the JS app</li>
<li>http://example.com/api - serves the API</li>
</ul>


<p>It&#8217;s pretty trivial to set this up with nginx, but developing locally is a bit trickier.
Running both apps with <code>rails server</code> will put them on different ports and the JS app won&#8217;t be able to communicate with the API.</p>

<p>We could setup a local nginx config on our development machines, but this makes it harder to setup breakpoints in ruby-debug amongst other things.</p>

<p>Rails apps are just Rack apps, so my first thought was to create a config.ru which mounts both Rails apps:</p>

<figure class='code'><figcaption><span>config.ru  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../api/config/environment&#39;</span><span class="p">,</span>  <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../frontend/config/environment&#39;</span><span class="p">,</span>  <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span>
</span><span class='line'> <span class="n">map</span> <span class="s2">&quot;/api&quot;</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">run</span> <span class="no">API</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'> <span class="n">map</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">run</span> <span class="no">Frontend</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This raises an error saying <code>You cannot have more than one Rails::Application</code> so that&#8217;s that idea out the window.</p>

<p>We could turn the API into a Rails Engine and mount that inside the other app, but we really want these two apps to be completely separate and not have to know about each other outside of the documented API.</p>

<p>The obvious solution is to use a proxy to let us run each Rails app independently and have the proxy forward requests to each one depending on the URL.</p>

<p>The simplest thing I could think to setup a proxy server was to use <a href="https://github.com/ncr/rack-proxy">Rack::Proxy</a> and about 5 minutes later I had a working solution:</p>

<figure class='code'><figcaption><span>config.ru  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rack-proxy&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AppProxy</span> <span class="o">&lt;</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Proxy</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rewrite_env</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="n">request</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Request</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span> <span class="o">=~</span> <span class="sr">%r{^/api}</span>
</span><span class='line'>      <span class="n">env</span><span class="o">[</span><span class="s2">&quot;HTTP_HOST&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;localhost:3001&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">env</span><span class="o">[</span><span class="s2">&quot;HTTP_HOST&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;localhost:3000&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">env</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="no">AppProxy</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty simple, we just rewrite the HTTP_HOST depending on whether or not the requested path starts with &#8220;/api&#8221;.</p>

<p>Now we fire up the frontend and backend Rails apps on port 3000 and 3001 respectively, run the proxy on another port and point the browser there.</p>

<p>Using <code>rackup config.ru</code> worked fine, but when I tried to run the proxy using passenger-standalone I got the following error:</p>

<figure class='code'><figcaption><span>$ passenger start -p 9999 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>=============== Phusion Passenger Standalone web server started ===============
</span><span class='line'>PID file: /Users/rlivsey/Sites/multi-rails-experiment/tmp/pids/passenger.9999.pid
</span><span class='line'>Log file: /Users/rlivsey/Sites/multi-rails-experiment/log/passenger.9999.log
</span><span class='line'>Environment: development
</span><span class='line'>Accessible via: http://0.0.0.0:9999/
</span><span class='line'>
</span><span class='line'>You can stop Phusion Passenger Standalone by pressing Ctrl-C.
</span><span class='line'>===============================================================================
</span><span class='line'>2012/02/23 14:11:52 [error] 9691#0: *4 "/Users/rlivsey/Sites/multi-rails-experiment/public/index.html" is not found (2: No such file or directory), client: 127.0.0.1, server: _, request: "HEAD / HTTP/1.1", host: "0.0.0.0"
</span><span class='line'>2012/02/23 14:12:07 [error] 9691#0: *5 "/Users/rlivsey/Sites/multi-rails-experiment/public/index.html" is not found (2: No such file or directory), client: 127.0.0.1, server: _, request: "GET / HTTP/1.1", host: "localhost:9999"
</span><span class='line'>2012/02/23 14:12:07 [error] 9691#0: *5 open() "/Users/rlivsey/Sites/multi-rails-experiment/public/favicon.ico" failed (2: No such file or directory), client: 127.0.0.1, server: _, request: "GET /favicon.ico HTTP/1.1", host: "localhost:9999"</span></code></pre></td></tr></table></div></figure>


<p>This is because passenger-standalone sets up the nginx config expecting there to be a <code>public</code> directory, so I just created an empty one and everything worked fine.</p>

<p>With this setup we can also trivially switch the API host to point to production, letting us develop the frontend against the production API should we want to test the UI with live data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ship Ship Hooray! What I've learned from launching MinuteBase]]></title>
    <link href="http://livsey.org/blog/2011/08/29/ship-ship-hooray/"/>
    <updated>2011-08-29T17:30:00+01:00</updated>
    <id>http://livsey.org/blog/2011/08/29/ship-ship-hooray</id>
    <content type="html"><![CDATA[<p>It&#8217;s been a few days since we turned on payment and, in my eyes at least, officially shipped <a href="http://minutebase.com">MinuteBase</a>. We&#8217;ve been in beta for quite some time, but having paying customers is the major milestone which transforms it from a &#8220;project&#8221; into an actual business. I&#8217;ve learned a huge amount and thought that now is a good time to look back at our progress.</p>

<h2>What went well</h2>

<h3>We based MinuteBase on a problem we actually experienced</h3>

<p>I&#8217;ve worked on a number of projects over the years which I thought were a good idea, but weren&#8217;t solving a problem that I actually faced. This lead to either solving the wrong problem, or just getting bored once the rush of building something new wore off. Just because you experience a problem doesn&#8217;t necessarily mean that it&#8217;s a viable business, but it certainly helps.</p>

<h3>I had a co-founder</h3>

<p>This has been essential for getting through the inevitable slumps in motivation which occur. It&#8217;s much easier to quit when there&#8217;s no one else involved. We&#8217;ve not always agreed, far from it, but the many hours of discussion and arguments have lead to a much better product.</p>

<p>Having a co-founder with complementary skills is also essential. I&#8217;m a pretty good developer but I&#8217;m never going to be mistaken for a designer. I like to think I have a reasonably good eye, but put me in front of PhotoShop for a year and it&#8217;s unlikely that I&#8217;ll produce anything as beautiful as MinuteBase.</p>

<h3>We launched early</h3>

<p>Our first version wasn&#8217;t quite an MVP, we probably could have launched earlier, but looking back it&#8217;s amazing what features we didn&#8217;t have. Having actual users other than ourselves tell us what they are missing has been fantastic. It also means we&#8217;ve been able to focus on things which are actual problems, instead of imagined &#8220;essential&#8221; features which in the end don&#8217;t matter all that much.</p>

<h3>We dog-fooded right from the beginning</h3>

<p>Because MinuteBase was built to solve a problem we actually had, we were able to use it right from the earliest stages in the companies we worked for and to collaborate with our clients. We also use MinuteBase to build MinuteBase, by writing up all our meetings and discussions, sharing documents and tracking the tasks and actions as we go.</p>

<p>Using it every day means we have a better idea of where we need to improve than having to wait for other people to tell us.  I&#8217;m even using it right now to write up this blog post, you can <a href="http://livsey.minutebase.com/meetings/ship-ship-hooray">see it at MinuteBase here</a>.</p>

<h2>What could be improved</h2>

<h3>Iterations were too long</h3>

<p>MinuteBase 2 initially started off as some small improvements to the prototype app, there&#8217;s nothing there which we couldn&#8217;t have added in iteratively as we went. Instead we put too many changes and into one release and ended up taking far too long to get changes in-front of our users where we could get feedback.</p>

<h3>We changed technology stack mid-stream</h3>

<p>The first version was built using Merb, MySQL, DataMapper and Prototype. Our version 2 is Rails 3, MongoDB, MongoMapper, ElasticSearch and jQuery. Very little code survives from the initial prototype.</p>

<p>This meant that far too much time was spent re-building things which already worked instead of on improvements. It also meant that it took us much longer to get in front of our users as we couldn&#8217;t run both versions side by side sharing the same database.</p>

<p>However, building one to throw away meant that when we were building &#8220;version 2&#8221; we had a much better idea of what worked and what didn&#8217;t. We were able to make more fundamental changes to the way the app worked than if we were iteratively changing the prototype.</p>

<h3>We didn&#8217;t turn on payment early enough</h3>

<p>There&#8217;s no reason why we couldn&#8217;t have enabled payment 6 months ago, in version 1 of the app. Instead we convinced ourselves that it wasn&#8217;t ready, and that we&#8217;d turn on payment after &#8220;this one next feature&#8221; or bug fix. Of course because our iterations were too large, that &#8220;one next feature&#8221; ended up taking months, during which time we could have been bringing in money and proving the business model. We even had people asking how they could pay us!</p>

<h3>We didn&#8217;t have a &#8220;business guy&#8221;</h3>

<p>After going through this process I think the ultimate founding team is a designer, a developer and a business-person. While we&#8217;re building the product there&#8217;s no one focused on sales &amp; marketing or just getting out there and talking to people.</p>

<p>That&#8217;s not to say that we shouldn&#8217;t or couldn&#8217;t be doing more of that side of things ourselves, but it&#8217;s easy to put off going out &amp; talking to people, or drumming up press until after you&#8217;ve &#8220;finished&#8221; building the app. And you never really finish.</p>

<h3>We&#8217;ve been too quiet</h3>

<p>If you look at the <a href="http://blog.minutebase.com">MinuteBase blog</a> or <a href="http://twitter.com/minutebase">Twitter stream</a>, you&#8217;ll see there&#8217;s not a lot there. All the posts are about changes to the app and new features.</p>

<p>We need to get much better at producing original content and linking to interesting material so that the blog itself can work as a marketing channel. As it stands, unless you&#8217;re a MinuteBase user, there&#8217;s not much point subscribing to our blog or following us on Twitter.</p>

<p>This has to change and we&#8217;re going to be spending much more time on this in future.</p>

<h3>MinuteBase might be too specific a name</h3>

<p>Our original focus was to build the best tool to take meeting minutes and we chose our name based on that. Call it scope creep, or pivoting, but the MinuteBase of today does far more than just meeting minutes.</p>

<p>With the introduction of workspaces, MinuteBase has turned into a great project management tool but our name is still focused on one part of the app.</p>

<p>Time will tell how much of a problem this is, but having a more generic name or something focused on meetings instead of minutes could have been a better idea.</p>

<h2>In Closing</h2>

<p>So many of these lessons are things should have already known. In my day job managing projects over the years I preached agile development, small iterations, test driven development. Even things I didn&#8217;t have first hand experience in I should have known via talking to others or from <a href="http://news.ycombinator.com">Hacker News</a> over the years.</p>

<p>For some reason when you&#8217;re building it for yourself and don&#8217;t have anyone to report to these things go out of the window.</p>

<p>This process has made me a much better developer, a much better manager and no matter what happens to MinuteBase I&#8217;ve no doubt that it makes me a far more capable person than I was before.</p>

<p>If you go to meetings, or manage projects, why not give <a href="http://minutebase.com">MinuteBase</a> a try.</p>
]]></content>
  </entry>
  
</feed>
